import { VoucherEntity } from "../../../models/v1/VoucherEntity.js";
import { toVoucherDTO } from "../../../mappers/v1/voucherMapper.js";
// üìç L·∫•y danh s√°ch voucher
export const getAllVouchers = async (req, res) => {
    try {
        let { page = 1, limit = 10 } = req.query;
        const numPage = Number(page);
        const numLimit = Number(limit);
        // N·∫øu limit = -1 ‚Üí l·∫•y to√†n b·ªô
        if (numLimit === -1) {
            const vouchers = await VoucherEntity.find().sort({ createdAt: -1 });
            return res.json({
                code: 0,
                data: vouchers.map(toVoucherDTO),
                pagination: {
                    page: 1,
                    limit: vouchers.length,
                    totalPages: 1,
                    total: vouchers.length
                }
            });
        }
        // C·∫•u h√¨nh ph√¢n trang
        const options = {
            page: numPage,
            limit: numLimit,
            sort: { createdAt: -1 }
        };
        const result = await VoucherEntity.paginate({}, options);
        return res.json({
            code: 0,
            data: result.docs.map(toVoucherDTO),
            pagination: {
                page: result.page,
                limit: result.limit,
                totalPages: result.totalPages,
                total: result.totalDocs
            }
        });
    }
    catch (err) {
        return res.status(500).json({ code: 1, message: "L·ªói l·∫•y danh s√°ch voucher", error: err.message });
    }
};
// üìç L·∫•y voucher theo ID
export const getVoucherById = async (req, res) => {
    try {
        const voucher = await VoucherEntity.findById(req.params.id);
        if (!voucher) {
            return res.status(404).json({ code: 1, message: "Voucher kh√¥ng t·ªìn t·∫°i" });
        }
        return res.json({ code: 0, data: toVoucherDTO(voucher) });
    }
    catch (err) {
        return res.status(500).json({ code: 1, message: err.message });
    }
};
// üìç T·∫°o m·ªõi voucher
export const createVoucher = async (req, res) => {
    try {
        const exists = await VoucherEntity.findOne({ code: req.body.code });
        if (exists) {
            return res.status(400).json({ code: 1, message: "M√£ voucher ƒë√£ t·ªìn t·∫°i" });
        }
        const voucher = new VoucherEntity(req.body);
        await voucher.save();
        return res.json({
            code: 0,
            message: "T·∫°o voucher th√†nh c√¥ng",
            data: toVoucherDTO(voucher)
        });
    }
    catch (err) {
        return res.status(500).json({ code: 1, message: err.message });
    }
};
// üìç C·∫≠p nh·∫≠t voucher
export const updateVoucher = async (req, res) => {
    try {
        const { id } = req.params;
        const updateData = req.body;
        const voucher = await VoucherEntity.findById(id);
        if (!voucher) {
            return res.status(404).json({ code: 1, message: "Voucher kh√¥ng t·ªìn t·∫°i" });
        }
        const now = new Date();
        // Voucher ƒë√£ h·∫øt h·∫°n
        if (voucher.endDate < now) {
            return res.status(400).json({ code: 1, message: "Voucher ƒë√£ h·∫øt h·∫°n, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t" });
        }
        // N·∫øu voucher ƒëang ho·∫°t ƒë·ªông ho·∫∑c ƒë√£ c√≥ ng∆∞·ªùi d√πng ‚Üí h·∫°n ch·∫ø update
        if (voucher.usedCount > 0 || (voucher.startDate <= now && voucher.endDate >= now)) {
            const allowedFields = ["isActive", "name", "description"];
            const filteredData = Object.keys(updateData)
                .filter((k) => allowedFields.includes(k))
                .reduce((obj, key) => {
                obj[key] = updateData[key];
                return obj;
            }, {});
            const updated = await VoucherEntity.findByIdAndUpdate(id, filteredData, { new: true });
            return res.json({
                code: 0,
                message: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
                data: toVoucherDTO(updated)
            });
        }
        // N·∫øu ch∆∞a b·∫Øt ƒë·∫ßu ‚Üí cho c·∫≠p nh·∫≠t to√†n b·ªô
        const updated = await VoucherEntity.findByIdAndUpdate(id, updateData, { new: true });
        return res.json({
            code: 0,
            message: "C·∫≠p nh·∫≠t voucher th√†nh c√¥ng",
            data: toVoucherDTO(updated)
        });
    }
    catch (err) {
        return res.status(500).json({ code: 1, message: err.message });
    }
};
// üìç X√≥a voucher
export const deleteVoucher = async (req, res) => {
    try {
        const { id } = req.params;
        const voucher = await VoucherEntity.findById(id);
        if (!voucher) {
            return res.status(404).json({ code: 1, message: "Voucher kh√¥ng t·ªìn t·∫°i" });
        }
        const now = new Date();
        if (voucher.usedCount > 0 || voucher.startDate <= now) {
            // Ch·ªâ v√¥ hi·ªáu h√≥a thay v√¨ x√≥a
            voucher.isActive = false;
            await voucher.save();
            return res.json({
                code: 0,
                message: "Voucher ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ho·∫∑c ƒëang ho·∫°t ƒë·ªông ‚Äî chuy·ªÉn sang tr·∫°ng th√°i v√¥ hi·ªáu h√≥a"
            });
        }
        // C√≥ th·ªÉ x√≥a h·∫≥n
        await VoucherEntity.findByIdAndDelete(id);
        return res.json({ code: 0, message: "X√≥a voucher th√†nh c√¥ng" });
    }
    catch (err) {
        return res.status(500).json({ code: 1, message: err.message });
    }
};
export const toggleActiveVoucher = async (req, res) => {
    try {
        const { id } = req.params;
        const voucher = await VoucherEntity.findById(id);
        if (!voucher) {
            return res.status(404).json({ code: 1, message: "Voucher kh√¥ng t·ªìn t·∫°i" });
        }
        const now = new Date();
        // Voucher ƒë√£ h·∫øt h·∫°n th√¨ kh√¥ng th·ªÉ b·∫≠t l·∫°i
        if (voucher.endDate < now) {
            return res.status(400).json({
                code: 1,
                message: "Voucher ƒë√£ h·∫øt h·∫°n, kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i",
            });
        }
        // ƒê·∫£o tr·∫°ng th√°i ho·∫°t ƒë·ªông
        voucher.isActive = !voucher.isActive;
        await voucher.save();
        return res.json({
            code: 0,
            message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông th√†nh c√¥ng",
            data: toVoucherDTO(voucher),
        });
    }
    catch (err) {
        return res.status(500).json({
            code: 1,
            message: err.message || "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i voucher",
        });
    }
};
// üìç √Åp d·ª•ng voucher ƒë·ªÉ t√≠nh gi·∫£m gi√°
export const applyVoucher = async (req, res) => {
    var _a;
    try {
        const { code, orderTotal, productIds, orderCreatedAt } = req.body;
        if (!code || !orderTotal) {
            return res.status(400).json({
                code: 1,
                message: "Thi·∫øu m√£ voucher ho·∫∑c gi√° tr·ªã ƒë∆°n h√†ng",
            });
        }
        const voucher = await VoucherEntity.findOne({ code, isActive: true });
        if (!voucher) {
            return res.status(404).json({ code: 1, message: "Voucher kh√¥ng t·ªìn t·∫°i" });
        }
        const now = new Date();
        if (voucher.startDate > now || voucher.endDate < now) {
            return res.status(400).json({ code: 1, message: "Voucher ƒë√£ h·∫øt h·∫°n" });
        }
        if (voucher.usageLimit > 0 && voucher.usedCount >= voucher.usageLimit) {
            return res.status(400).json({ code: 1, message: "Voucher ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng" });
        }
        if (voucher.minOrderValue && orderTotal < voucher.minOrderValue) {
            return res.status(400).json({
                code: 1,
                message: `ƒê∆°n h√†ng ch∆∞a ƒë·∫°t gi√° tr·ªã t·ªëi thi·ªÉu ${voucher.minOrderValue.toLocaleString()}ƒë ƒë·ªÉ √°p d·ª•ng voucher`,
            });
        }
        let discount = 0;
        let message = "√Åp d·ª•ng voucher th√†nh c√¥ng";
        // ========== TYPE X·ª¨ L√ù ==========
        switch (voucher.type) {
            // 1Ô∏è‚É£ Gi·∫£m ph·∫ßn trƒÉm t·ªïng ƒë∆°n
            case "percentage":
                discount = Math.min((orderTotal * voucher.value) / 100, voucher.maxDiscount || Infinity);
                break;
            // 2Ô∏è‚É£ Gi·∫£m s·ªë ti·ªÅn c·ªë ƒë·ªãnh
            case "fixed":
                discount = Math.min(voucher.value, orderTotal);
                break;
            // 3Ô∏è‚É£ Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn (t·ªëi ƒëa X VNƒê)
            case "freeship":
                if (!voucher.maxShippingDiscount || voucher.maxShippingDiscount <= 0) {
                    return res.status(400).json({
                        code: 1,
                        message: "Voucher freeship ch∆∞a c√≥ c·∫•u h√¨nh m·ª©c gi·∫£m ph√≠ v·∫≠n chuy·ªÉn t·ªëi ƒëa",
                    });
                }
                discount = Math.min(voucher.maxShippingDiscount, orderTotal);
                message = `√Åp d·ª•ng mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn (t·ªëi ƒëa ${voucher.maxShippingDiscount.toLocaleString()}ƒë)`;
                break;
            // 4Ô∏è‚É£ Gi·∫£m gi√° theo s·∫£n ph·∫©m c·ª• th·ªÉ
            case "product":
                if (!productIds || !Array.isArray(productIds) || productIds.length === 0) {
                    return res.status(400).json({ code: 1, message: "Thi·∫øu danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng" });
                }
                const applicable = ((_a = voucher.applicableProducts) === null || _a === void 0 ? void 0 : _a.map(p => p.toString())) || [];
                const matched = productIds.filter(id => applicable.includes(id.toString()));
                if (matched.length === 0) {
                    return res.status(400).json({
                        code: 1,
                        message: "Voucher n√†y ch·ªâ √°p d·ª•ng cho s·∫£n ph·∫©m c·ª• th·ªÉ",
                    });
                }
                discount = Math.min(voucher.value * matched.length, orderTotal);
                message = `Gi·∫£m gi√° cho ${matched.length} s·∫£n ph·∫©m √°p d·ª•ng`;
                break;
            // 5Ô∏è‚É£ Gi·∫£m gi√° trong khung gi·ªù/khung th·ªùi gian ƒë·∫∑c bi·ªát
            case "timed":
                if (!orderCreatedAt) {
                    return res.status(400).json({
                        code: 1,
                        message: "Thi·∫øu th·ªùi gian t·∫°o ƒë∆°n ƒë·ªÉ ki·ªÉm tra voucher th·ªùi gian",
                    });
                }
                const createdAt = new Date(orderCreatedAt);
                if (createdAt < voucher.startDate || createdAt > voucher.endDate) {
                    return res.status(400).json({
                        code: 1,
                        message: "Voucher ch·ªâ √°p d·ª•ng trong khung th·ªùi gian nh·∫•t ƒë·ªãnh",
                    });
                }
                // √Åp d·ª•ng nh∆∞ fixed/percentage t√πy config
                discount = Math.min((orderTotal * voucher.value) / 100, voucher.maxDiscount || Infinity);
                message = "√Åp d·ª•ng voucher khung th·ªùi gian";
                break;
            default:
                return res.status(400).json({ code: 1, message: "Lo·∫°i voucher kh√¥ng h·ª£p l·ªá" });
        }
        // ========== TR·∫¢ K·∫æT QU·∫¢ ==========
        return res.json({
            code: 0,
            message,
            data: {
                code: voucher.code,
                type: voucher.type,
                discount,
                stackable: voucher.stackable,
                expiresAt: voucher.endDate,
            },
        });
    }
    catch (err) {
        return res.status(500).json({ code: 1, message: err.message });
    }
};
//# sourceMappingURL=voucherController.js.map