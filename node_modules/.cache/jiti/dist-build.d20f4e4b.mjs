"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _path = _interopRequireDefault(await jitiImport("path"));
var _fs = _interopRequireDefault(await jitiImport("fs"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}
const setupBuild = function (options) {
  if (!options.treeShake) {
    this.options.css.push('vuetify/dist/vuetify.css');
  }
  // Enable tree-shaking with VuetifyLoader (https://github.com/vuetifyjs/vuetify-loader)
  if (options.treeShake) {
    const VuetifyLoaderPlugin = this.nuxt.resolver.requireModule('vuetify-loader/lib/plugin');
    this.options.build.transpile.push('vuetify/lib');
    this.extendBuild((config) => {
      config.plugins.push(new VuetifyLoaderPlugin(typeof options.treeShake === 'object' ?
      options.treeShake.loaderOptions :
      {}));
    });
  }
  // Remove module options
  const vuetifyOptions = { ...options };
  delete vuetifyOptions.customVariables;
  delete vuetifyOptions.defaultAssets;
  delete vuetifyOptions.optionsPath;
  delete vuetifyOptions.preset;
  delete vuetifyOptions.treeShake;
  let optionsPath = this.nuxt.resolver.resolveAlias(options.optionsPath ||
  _path.default.join(this.options.dir.app || 'app', 'vuetify', 'options.js'));
  optionsPath = _fs.default.existsSync(optionsPath) ? optionsPath : null;
  // Register options template
  this.addTemplate({
    fileName: `vuetify/options.${optionsPath && optionsPath.endsWith('ts') ? 'ts' : 'js'}`,
    src: optionsPath || _path.default.resolve(__dirname, '../templates', 'options.js'),
    options: vuetifyOptions
  });
  // Register plugin
  this.addPlugin({
    fileName: 'vuetify/plugin.js',
    src: _path.default.resolve(__dirname, '../templates', 'plugin.js'),
    options: {
      defaultIconPreset: options.defaultAssets && options.defaultAssets.icons,
      preset: options.preset,
      treeShake: options.treeShake
    }
  });
};var _default = exports.default =
setupBuild; /* v9-e852bc78259c79d8 */
